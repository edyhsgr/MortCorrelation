library(tidyverse)
library(splines)
age = 0:99
age.grid = seq(0,100,.25)
B = bs(x=age.grid, knots=c(25,50,75), intercept = TRUE, degree=3)
matplot( age.grid, B, type='l', lwd=4, lty=1,
main='Example B-spline Basis')
alpha1 = c(0.51, 0.92, 0.31, 0.8, 0.53, 0.13, 0.21)
alpha2 = c(0.26, 0.45, 0.84, 0.62, 0.44, 0.6, 0.55)
plot(age.grid, B %*% alpha1, ylim=c(0,1))
plot(age.grid, B %*% alpha2, ylim=c(0,1))
spline.analysis.plot = function(a) {
plot( age.grid, B %*% a, col='grey',lwd=6, ylim=c(0,1))
for (i in seq(a)) {
lines(age.grid, B[,i] * a[i], col=i, lwd=4)
}
}
spline.analysis.plot(alpha1)
spline.analysis.plot(alpha2)
show.spline.parts = function(a) {
plot(age.grid, B %*% a, ylim=c(0,1),
lwd=15, col='lightgrey')
abline(v=c(25,50,75),lty=2)
sel = (age.grid < 25)
lines(age.grid[sel], B[sel,] %*% a, col='black', lwd=6)
sel = (25 <= age.grid) & (age.grid < 50)
lines(age.grid[sel], B[sel,] %*% a, col='red', lwd=6)
sel = (50 <= age.grid) & (age.grid < 75)
lines(age.grid[sel], B[sel,] %*% a, col='black', lwd=6)
sel = (75 <= age.grid) & (age.grid < 100)
lines(age.grid[sel], B[sel,] %*% a, col='red', lwd=6)
title('Spline: Cubic sections between knots at (25,50,75)\nContinuous 2nd derivs')
} # show.spline.parts
show.spline.parts(alpha1)
show.spline.parts(alpha2)
############################################################
#  basic spline images
############################################################
rm(list=ls())
graphics.off()
windows(record=TRUE)
library(tidyverse)
library(splines)
age = 0:99
age.grid = seq(0,100,.25)
B = bs(x=age.grid, knots=c(25,50,75), intercept = TRUE, degree=3)
matplot( age.grid, B, type='l', lwd=4, lty=1,
main='Example B-spline Basis')
alpha1 = c(0.51, 0.92, 0.31, 0.8, 0.53, 0.13, 0.21)
alpha2 = c(0.26, 0.45, 0.84, 0.62, 0.44, 0.6, 0.55)
alpha3 = rep(.25,7)
plot(age.grid, B %*% alpha1, ylim=c(0,1))
plot(age.grid, B %*% alpha2, ylim=c(0,1))
plot(age.grid, B %*% alpha3, ylim=c(0,1))
spline.analysis.plot = function(a) {
plot( age.grid, B %*% a, col='grey',lwd=6, ylim=c(0,1))
for (i in seq(a)) {
lines(age.grid, B[,i] * a[i], col=i, lwd=4)
}
}
spline.analysis.plot(alpha1)
spline.analysis.plot(alpha2)
spline.analysis.plot(alpha3)
show.spline.parts = function(a) {
plot(age.grid, B %*% a, ylim=c(0,1),
lwd=15, col='lightgrey')
abline(v=c(25,50,75),lty=2)
sel = (age.grid < 25)
lines(age.grid[sel], B[sel,] %*% a, col='black', lwd=6)
sel = (25 <= age.grid) & (age.grid < 50)
lines(age.grid[sel], B[sel,] %*% a, col='red', lwd=6)
sel = (50 <= age.grid) & (age.grid < 75)
lines(age.grid[sel], B[sel,] %*% a, col='black', lwd=6)
sel = (75 <= age.grid) & (age.grid < 100)
lines(age.grid[sel], B[sel,] %*% a, col='red', lwd=6)
title('Spline: Cubic sections between knots at (25,50,75)\nContinuous 2nd derivs')
} # show.spline.parts
show.spline.parts(alpha1)
show.spline.parts(alpha2)
show.spline.parts(alpha3)
############################################################
#  basic spline images
############################################################
rm(list=ls())
graphics.off()
windows(record=TRUE)
library(tidyverse)
library(splines)
age = 0:99
age.grid = seq(0,100,.25)
B = bs(x=age.grid, knots=c(25,50,75), intercept = TRUE, degree=3)
matplot( age.grid, B, type='l', lwd=4, lty=1,
main='Example B-spline Basis')
alpha1 = c(0.51, 0.92, 0.31, 0.8, 0.53, 0.13, 0.21)
alpha2 = c(0.26, 0.45, 0.84, 0.62, 0.44, 0.6, 0.55)
alpha3 = rep(.25,7)
plot(age.grid, B %*% alpha1, ylim=c(0,1))
plot(age.grid, B %*% alpha2, ylim=c(0,1))
plot(age.grid, B %*% alpha3, ylim=c(0,1))
spline.analysis.plot = function(a) {
plot( age.grid, B %*% a, col='grey',lwd=6, ylim=c(0,1))
for (i in seq(a)) {
lines(age.grid, B[,i] * a[i], col=i, lwd=4)
}
}
spline.analysis.plot(alpha1)
spline.analysis.plot(alpha2)
spline.analysis.plot(alpha3)
show.spline.parts = function(a) {
plot(age.grid, B %*% a, ylim=c(0,1),
lwd=15, col='lightgrey')
abline(v=c(25,50,75),lty=2)
sel = (age.grid < 25)
lines(age.grid[sel], B[sel,] %*% a, col='black', lwd=6)
sel = (25 <= age.grid) & (age.grid < 50)
lines(age.grid[sel], B[sel,] %*% a, col='red', lwd=6)
sel = (50 <= age.grid) & (age.grid < 75)
lines(age.grid[sel], B[sel,] %*% a, col='black', lwd=6)
sel = (75 <= age.grid) & (age.grid < 100)
lines(age.grid[sel], B[sel,] %*% a, col='red', lwd=6)
title('Cubic Spline (d=3) between knots at (25,50,75)\nContinuous Level, 1st, 2nd derivs')
} # show.spline.parts
show.spline.parts(alpha1)
show.spline.parts(alpha2)
show.spline.parts(alpha3)
B
dim(B)
crossprod(B)
############################################################
#  basic spline images
############################################################
rm(list=ls())
graphics.off()
windows(record=TRUE)
library(tidyverse)
library(splines)
age = 0:99
age.grid = seq(0,100,.25)
B = bs(x=age.grid, knots=c(25,50,75), intercept = TRUE, degree=3)
matplot( age.grid, B, type='l', lwd=4, lty=1,
main='')
alpha1 = c(0.51, 0.92, 0.31, 0.8, 0.53, 0.13, 0.21)
alpha2 = c(0.26, 0.45, 0.84, 0.62, 0.44, 0.6, 0.55)
alpha3 = rep(.25,7)
plot(age.grid, B %*% alpha1, ylim=c(0,1))
plot(age.grid, B %*% alpha2, ylim=c(0,1))
plot(age.grid, B %*% alpha3, ylim=c(0,1))
spline.analysis.plot = function(a) {
plot( age.grid, B %*% a, col='grey',lwd=6, ylim=c(0,1))
for (i in seq(a)) {
lines(age.grid, B[,i] * a[i], col=i, lwd=4)
}
}
spline.analysis.plot(alpha1)
spline.analysis.plot(alpha2)
spline.analysis.plot(alpha3)
show.spline.parts = function(a) {
plot(age.grid, B %*% a, ylim=c(0,1),
lwd=15, col='lightgrey')
abline(v=c(25,50,75),lty=2)
sel = (age.grid < 25)
lines(age.grid[sel], B[sel,] %*% a, col='black', lwd=6)
sel = (25 <= age.grid) & (age.grid < 50)
lines(age.grid[sel], B[sel,] %*% a, col='red', lwd=6)
sel = (50 <= age.grid) & (age.grid < 75)
lines(age.grid[sel], B[sel,] %*% a, col='black', lwd=6)
sel = (75 <= age.grid) & (age.grid < 100)
lines(age.grid[sel], B[sel,] %*% a, col='red', lwd=6)
title('Cubic Spline (d=3) between knots at (25,50,75)\nContinuous Level, 1st, 2nd derivs')
} # show.spline.parts
show.spline.parts(alpha1)
show.spline.parts(alpha2)
show.spline.parts(alpha3)
spline.analysis.plot(alpha1)
alpha1
spline.analysis.plot(alpha2)
alpha2
windows(record=TRUE)
curve( dbeta(x, .0001, 1000+.0999))
curve( dbeta(x, .0001, 1000+.0999), to=.01)
curve( dbeta(x, .0001, 100+.0999), to=.01)
curve( dbeta(x, .0001, 10+.0999), to=.01)
curve( dbeta(x, .0001, 1+.0999), to=.01)
curve( dbeta(x, .0001, 0+.0999), to=.01)
curve( dbeta(x, 45+.0001, 955+.0999), to=.01)
curve( dbeta(x, 45+.0001, 955+.0999), to=.07)
curve( dbeta(x, 45+.001, 955+.099), to=.07)
curve( dbeta(x, 0+.001, 100+.099), to=.07)
curve( dbeta(x, 2+.001, 100+.099), to=.07)
BIG = rbind( c(1,0),
c(1,1)/2,
c(1,1))
BIG
A = rbind( c(1,0),
c(1,1)/2,
c(1,1))
A = rbind( c(1,0),
c(1,1)/2,
c(1,1))
library(MASS)
ginv(crossprod(A)) %*% t(A)
A = rbind( c(1,0),
c(1,1)/2,
c(1,1))
library(MASS)
ginv(crossprod(A)) %*% t(A[1:2,])
A = rbind( c(1,0),
c(1,1)/2,
c(1,1))
library(MASS)
ginv(crossprod(A)) %*% t(A[1:2,]) %*% 1:2
nref = 3
cc   = combn(k,nref)
rmse = rep(NA, ncol(cc))
for (j in seq(rmse)) {
ix = cc[,j]
rmse[j] = sqrt( mean( (x[,ix]-y)^2))
}
nref = 3
cc   = combn(k,nref)
n = 100000
k = 20
x = matrix( runif(k*n), ncol=k)
y = runif(n)
nref = 3
cc   = combn(k,nref)
rmse = rep(NA, ncol(cc))
for (j in seq(rmse)) {
ix = cc[,j]
rmse[j] = sqrt( mean( (x[,ix]-y)^2))
}
str(rmse)
best_ref = cc[, which.min(rmse)],
list(
nref     = nref,
best_ref = cc[, which.min(rmse)],
best_err = min(rmse)
)
analyze = function(nref) {
cc   = combn(k,nref)
rmse = rep(NA, ncol(cc))
for (j in seq(rmse)) {
ix = cc[,j]
rmse[j] = sqrt( mean( (x[,ix]-y)^2))
}
list(
nref     = nref,
best_ref = cc[, which.min(rmse)],
best_err = min(rmse)
)
}
analyze(6)
library(tidyverse)
n = 100000
k = 20
x = matrix( runif(k*n), ncol=k)
y = runif(n)
analyze = function(nref) {
cc   = combn(k,nref)
rmse = rep(NA, ncol(cc))
for (j in seq(rmse)) {
ix = cc[,j]
rmse[j] = sqrt( mean( (x[,ix]-y)^2))
}
list(
nref     = nref,
best_ref = cc[, which.min(rmse)],
best_err = min(rmse)
)
}
L = vector('list', k-1)
for (i in 2:k) L[[k-1]] = analyze(k)
head(L)
L
library(tidyverse)
n = 100000
k = 20
x = matrix( runif(k*n), ncol=k)
y = runif(n)
analyze = function(nref) {
cc   = combn(k,nref)
rmse = rep(NA, ncol(cc))
for (j in seq(rmse)) {
ix = cc[,j]
rmse[j] = sqrt( mean( (x[,ix]-y)^2))
}
list(
nref     = nref,
best_ref = cc[, which.min(rmse)],
best_err = min(rmse)
)
}
L = vector('list', k-1)
for (i in 2:k) L[[i-1]] = analyze(k)
L
L = vector('list', k-1)
for (i in 2:k) L[[i-1]] = analyze(i)
analyze = function(nref) {
cc   = combn(k,nref)
rmse = rep(NA, ncol(cc))
for (j in seq(rmse)) {
ix = cc[,j]
rmse[j] = sqrt( mean( (rowMeans(x[,ix])-y)^2) )
}
list(
nref     = nref,
best_ref = cc[, which.min(rmse)],
best_err = min(rmse)
)
}
analyze(2)
analyze(3)
analyze(4)
library(tidyverse)
n = 100000
k = 20
x = matrix( runif(k*n), ncol=k)
y = runif(n)
analyze = function(nref) {
cc   = combn(k,nref)
rmse = rep(NA, ncol(cc))
for (j in seq(rmse)) {
ix = cc[,j]
rmse[j] = sqrt( mean( (rowMeans(x[,ix])-y)^2) )
}
list(
nref     = nref,
best_ref = cc[, which.min(rmse)],
best_err = min(rmse)
)
}
L = vector('list', k-1)
for (i in 2:k) L[[i-1]] = analyze(i)
library(tidyverse)
n = 1000
k = 20
x = matrix( runif(k*n), ncol=k)
y = runif(n)
analyze = function(nref) {
cc   = combn(k,nref)
rmse = rep(NA, ncol(cc))
for (j in seq(rmse)) {
ix = cc[,j]
rmse[j] = sqrt( mean( (rowMeans(x[,ix])-y)^2) )
}
list(
nref     = nref,
best_ref = cc[, which.min(rmse)],
best_err = min(rmse)
)
}
L = vector('list', k-1)
for (i in 2:k) L[[i-1]] = analyze(i)
library(tidyverse)
n = 1000
k = 20
x = matrix( runif(k*n), ncol=k)
y = runif(n)
analyze = function(nref) {
cc   = combn(k,nref)
rmse = rep(NA, ncol(cc))
for (j in seq(rmse)) {
ix = cc[,j]
rmse[j] = sqrt( mean( (rowMeans(x[,ix])-y)^2) )
}
list(
nref     = nref,
best_ref = cc[, which.min(rmse)],
best_err = min(rmse)
)
}
L = vector('list', k-1)
for (i in 2:k) {
print(i)
L[[i-1]] = analyze(i)
}
L
sapply(L, function(x) x$best_err)
plot(2:k, sapply(L, function(x) x$best_err), type='o')
L[[1:3]]
L[[c(1,2,3)]]
L[c(1,2,3)]
L[1:3]
x[, c(1,5,12)]
rowMeans(x[, c(1,5,12)])
rowMeans(x[, c(1,5,12)]) - y
(rowMeans(x[, c(1,5,12)]) - y)^2
(rowMeans(x[, c(1,5,12)]) - y)^2 %>% mean %>% sqrt
L[2]
sapply(L, function(x) x$best_err) %>% which.min
library(tidyverse)
n = 100
k = 20
x = matrix( runif(k*n), ncol=k)
y = runif(n)
analyze = function(nref) {
cc   = combn(k,nref)
rmse = rep(NA, ncol(cc))
for (j in seq(rmse)) {
ix = cc[,j]
rmse[j] = sqrt( mean( (rowMeans(x[,ix])-y)^2) )
}
list(
nref     = nref,
best_ref = cc[, which.min(rmse)],
best_err = min(rmse)
)
}
L = vector('list', k-1)
for (i in 2:k) {
print(i)
L[[i-1]] = analyze(i)
}
plot(2:k, sapply(L,function(x) x$best_err),
type='o')
library(tidyverse)
n = 100
k = 20
x = matrix( runif(k*n), ncol=k)
y = runif(n)
analyze = function(nref) {
cc   = combn(k,nref)
rmse = rep(NA, ncol(cc))
for (j in seq(rmse)) {
ix = cc[,j]
rmse[j] = sqrt( mean( (rowMeans(x[,ix])-y)^2) )
}
list(
nref     = nref,
best_ref = cc[, which.min(rmse)],
best_err = min(rmse)
)
}
L = vector('list', k-1)
for (i in 2:k) {
print(i)
L[[i-1]] = analyze(i)
}
plot(2:k, sapply(L,function(x) x$best_err),
type='o')
library(tidyverse)
n = 4000
k = 20
x = matrix( runif(k*n), ncol=k)
y = runif(n)
analyze = function(nref) {
cc   = combn(k,nref)
rmse = rep(NA, ncol(cc))
for (j in seq(rmse)) {
ix = cc[,j]
rmse[j] = sqrt( mean( (rowMeans(x[,ix])-y)^2) )
}
list(
nref     = nref,
best_ref = cc[, which.min(rmse)],
best_err = min(rmse)
)
}
L = vector('list', k-1)
for (i in 2:k) {
print(i)
L[[i-1]] = analyze(i)
}
plot(2:k, sapply(L,function(x) x$best_err),
type='o')
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/GitHub/USA-mortality")
#--------------------------------------------
# Carl Schmertmann
# created 13 Oct 18
# altered 13 Oct 18
#
# (period) probability of surviving from birth to age 5, by
# state and year
#---------------------------------------------
rm(list=ls())
library(tidyverse)
library(gganimate)
graphics.off()
if (.Platform$OS.type == 'windows') windows(record=TRUE)
#--------------------------
# Life tables are in a big (50MB) zipped file from the USMDB
# Extract the division-level, both-sex tables if necessary
need.to.build.df = !exists('state.df')
included_states = c('MN','UT','SC','MS')
included_states = state.abb
if (need.to.build.df) {
file_list = paste0('States/',included_states,'/',
included_states,'_bltper_1x1.csv')
unzip(zipfile='lifetables.zip', files=file_list, junkpaths=TRUE)
state.df = data.frame()
for (this.state in included_states) {
this.file = paste0(this.state,'_bltper_1x1.csv')
this.df = read.csv(this.file, stringsAsFactors = FALSE)
this.df$Age = 0:110 # make numeric
state.df = rbind( state.df, this.df)
file.remove(this.file)
}
} # if need.to.build
#--------------------------
# calculate the prob of death
# between ages 0 and 5
#--------------------------
q5.df =
state.df %>%
group_by(PopName,Year) %>%
summarize( q5 = 1000 * (1 - lx[6]/lx[1])) %>%
ungroup()
sample_n(q5.df, 10)
filter(q5.df, Year==1959) %>% sample_n(10)
source('~/GitHub/USA-mortality/state-level-q5-both-sexes.R', echo=TRUE)
movie
